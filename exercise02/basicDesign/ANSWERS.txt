# Exercise week 2
## Exercise 2.1
### 1
The result is correct and it took 6 seconds to complete.

### 2
See code.

### 3
With the updated code we still get the correct result,
and it now only takes 2.8 seconds to complete.

### 4
This is not possible as there will be lost updates.

### 5
Final is not necessary as we never change the pointer for count.

## Exercise 2.2
### 1
We need to ensure that our program knows that the cache can change at any point, so we always need to check if it has changed  when we use it.

### 2
This is a trick question. The final keyword is not needed with current implementation.

## Exercise 2.3
### 1
Span will always hold the same value, therefore not needing synchronization. Both increment and getCount need to synchronize their access to the count array, thus we make the two methods synchronized.

### 2
We get the expected result with the source code from our SimpleHistogram.java. 

### 3
We remove synchronize and use an array of AtomicIntegers, resulting in correct results. We can remove the synchronized keyword because every bin handles concurrency on its own. This takes 4 seconds.

### 4
By using AtomicIntegerArray we're now able to cut our time down to 3 seconds.
