Exercise 3.1:

1:
See code.

2:
See code.

3:
See code.

4:
See code.

5&6:
Our initial implementation used the reduce function - so we did not make flattenFun().

7:
See code.

8:
See code.

Exercise 3.2:
(Running Exercise32, should print answers)
1. See code in file Exercise32.java

2. See code in file Exercise32.java

3. See code in file Exercise32.java

Exercise 3.3:
1. See code.

2. See code.

3. See code.

4. See code.

5. See code.

6. Both are sufficiently fast that we're unable to tell the difference.
   It could however easily be tested.

7. See code, but prints more than asked for.
   Any elegant way to do only exactly what was asked for?

8. See code

9. See code

10. See code
    Did not see a specific tree map stream. Is this implementation far from intended?

11. See code

12. Vaaaaastly slower when just jamming on .parallel() (as hinted in 13)
    Rough estimate of about 4 times as slow on tested machine.

13. 8s total in comparison to non-concurrent 15s~

Exercise 3.4:

1. See code, the result is correct.

2. Sequential: 7.5s, parallel: 1.45 - 8 cores, it makes sense. The result is the same in parallel.

3. 6.66s wall clock. The result is however now: 21.3004815013485500
   In contrast to our streams: 21.3004815003479420

4. This takes 4.58s wall clock and produces the accurate result from 1/2.

5. Three executions all produced different results. Namely:
    63.1409618562123850
    66.9986484503136000
    68.7922630772929700

   This tells us that is very unwise to combine mutable state and parallel streams.
