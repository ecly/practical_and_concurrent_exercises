Exercise 1.1
1 
    Run 1: Count is 10131179 and should be 20000000
    Run 2: Count is 19108024 and should be 20000000

2
    Run 1: Count is 107 and should be 200
    Run 2: Count is 200 and should be 200

    Increment is now called fewer times, reducing the chance of lost updates.
    This software is not correct, as we have no guarantee that we'll get the expected outcome.

3
    Both of the illustrated alternatives are merely shorthand notation for the same action,
    hence they yield the same test results.

4
    With this change what we would naively expect is our final value to be 0.
    What we observe is values between -10,000,000 and 10,000,000.

5
i:
    Count is 17288 and should be 20000000
    Count is -12385 and should be 20000000
    This could arise due to explanation seen in [4].

ii: 
    Count is 28554 and should be 20000000
    Count is 19709 and should be 20000000
    With this, increment, get to overwrite decrements, but not the other way around,
    hence the generally positive values. We think.

iii:
    Count is -3210 and should be 20000000
    Count is -18864 and should be 20000000
    Opposite of [ii].

iv:
    Count is 0 and should be 20000000
    Count is 0 and should be 20000000
    "... its not possible for two invocations, of synchronized 
    methods on the same object to interleave." - java docs.

Exercise 1.2
1
    If one thread overtakes the other, we'll see the scenario happening.

2
    This works as expected because all of one print, has to execute, before another call
    on the same thread, or on the other thread, can be executed.

3
    Here we instantiate a 'new Object()' and use it as a lock with 'synchronized'
    in the body of print. We observe correct results.

4
    Made class static and changed sync to 'synchronized(Printer.class){...'
    
Exercise 1.3
1
    Same behavior observed

2
    This works

3
    Out of 3 attempts, none terminated, so this is not be relied on whatsoever.
    Here we observe same behavior as during the lecture, where the visibility of the 
    'mi.get()', is never refreshed in the while loop, hence looping forever.
    
4
    This now terminates, because we explicitly stated that value may change,
    thus the the java compiler does not optimize the loop to be infinite.

Exercise 1.4
1   
    The sequential run yields the following runtime:
    java TestCountPrimes  63.14s user 0.32s system 100% cpu 1:03.45 total

2
    The 10-thread version yields the following runtime:
    java TestCountPrimes  104.21s user 0.06s system 383% cpu 27.185 total

    Total time is substantially faster with the 10-thread.

3
    Parallel2 result: 2999032
    java TestCountPrimes  62.07s user 0.08s system 158% cpu 39.093 total

    This does not produce the correct result.
    
4
    In practise for this specific case, it does not matter whether get is synchronized or not.
    This is due to the fact that get is only used for read, and no writes depend on a call to get.
    In theory however, a non-synchronized get, can yield unexpected values, as we may have a
    concurrently executing increment, that we expect to finish before hand, which does not,
    resulting in an unexpected read from get.

Exercise 1.5
1
    We get the following results, indicating that Mystery is no thread-safe.
    Sum is 1514367.000000 and should be 2000000.000000
    Sum is 1515077.000000 and should be 2000000.000000
    Sum is 1506228.000000 and should be 2000000.000000
    Sum is 1514880.000000 and should be 2000000.000000

2
    addInstance will synchronize on 'this', and addStatic will synchronize on 'Myster.class',
    meaning that they will be using different locks.
    
3
    As seen in the source, we make a static Object in a field in the Mystery class,
    and use this object to synchronize in the body of both addInstance addStatic.

Exercise 1.6
1
    The simplest way would be to make every method in DoubleArrayList instance synchronized

2
    It scales poorly as it would be running entirely sequentially and with an additional
    thread overhead.

3 
    The various methods will be called in parallel, eg. causing a resize operation to be running
    while a get call is executed, resulting in undocumented behavior.

Exercise 1.7
1
    We introduce a new static lock, which we wrap the 'totalSize++;' in, causing at least
    the totalSize to be incremented as expected, even if everything else should behave
    unexpectedly.

2
    We can do this exactly like we did in [1], but for 'allLists.add(this)' instead.

Exercise 1.8
1
    Because the static synchronization is not sharing with child classes.

2
    In MysteryA, we introduce a 'static Object lock', which we use to synchronize in both
    of the increment bodies.
